---
# Raspberry Pi Specific Setup Playbook (Idempotent)
# This playbook ensures configuration matches desired state without breaking existing setup
- name: Raspberry Pi Optimization and Setup
  hosts: docker_hosts
  become: true
  gather_facts: true

  vars:
    # GPU memory split (reduce if running headless) - only set if not already configured
    gpu_memory_split: 16

    # Swap settings - only change if needed
    swap_size: 1024  # MB

  tasks:
    - name: Check if running on Raspberry Pi
      ansible.builtin.fail:
        msg: "This playbook is designed for Raspberry Pi systems only"
      when: "'arm' not in ansible_architecture and 'aarch64' not in ansible_architecture"

    - name: Update package cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Install Raspberry Pi specific packages (only if missing)
      ansible.builtin.apt:
        name:
          - vim
          - htop
          - git
          - curl
          - wget
        state: present

    - name: Set GPU memory split
      ansible.builtin.lineinfile:
        path: /boot/firmware/config.txt
        regexp: '^gpu_mem='
        line: "gpu_mem={{ gpu_memory_split }}"
        backup: true
        create: true
        mode: '0644'
      notify: Reboot required

    - name: Check current cgroup configuration
      ansible.builtin.slurp:
        src: /boot/firmware/cmdline.txt
      register: current_cmdline

    - name: Enable cgroup support for Docker (only if not present)
      ansible.builtin.lineinfile:
        path: /boot/firmware/cmdline.txt
        regexp: '^(.*rootwait)(.*)$'
        line: '\1 cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1\2'
        backrefs: true
        backup: true
        mode: '0644'
      notify: Reboot required
      when: "'cgroup_memory=1' not in (current_cmdline.content | b64decode)"

    - name: Check current swap configuration
      ansible.builtin.slurp:
        src: /etc/dphys-swapfile
      register: current_swap_config
      failed_when: false

    - name: Configure swap file size (only if different)
      ansible.builtin.lineinfile:
        path: /etc/dphys-swapfile
        regexp: '^CONF_SWAPSIZE='
        line: "CONF_SWAPSIZE={{ swap_size }}"
        backup: true
        mode: '0644'
      notify: Restart dphys-swapfile
      when:
        - current_swap_config.content is defined
        - "('CONF_SWAPSIZE=' + swap_size|string) not in (current_swap_config.content | b64decode)"

    - name: Ensure SSH service is running and enabled
      ansible.builtin.systemd:
        name: ssh
        enabled: true
        state: started

    - name: Create user docker directories (only if missing)
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop:
        - /home/{{ ansible_user }}/docker
        - /home/{{ ansible_user }}/docker/data
        - /home/{{ ansible_user }}/docker/logs
        - /home/{{ ansible_user }}/docker/scripts

    - name: Create Docker maintenance script (only if missing or different)
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # Docker maintenance script for Raspberry Pi

          echo "Starting Docker maintenance..."

          # Remove unused containers
          docker container prune -f

          # Remove unused images
          docker image prune -f

          # Remove unused volumes
          docker volume prune -f

          # Remove unused networks
          docker network prune -f

          # Show disk usage
          echo "Current disk usage:"
          df -h

          echo "Docker system disk usage:"
          docker system df

          echo "Docker maintenance completed on $(date)"
        dest: /home/{{ ansible_user }}/docker/scripts/docker-cleanup.sh
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
        force: false  # Don't overwrite if exists

    - name: Create system monitoring script for Pi (only if missing or different)
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # Raspberry Pi system monitoring

          echo "=== Raspberry Pi System Status - $(date) ==="
          echo

          echo "=== CPU Temperature ==="
          vcgencmd measure_temp
          echo

          echo "=== CPU Frequency ==="
          vcgencmd measure_clock arm
          echo

          echo "=== Memory Usage ==="
          free -h
          echo

          echo "=== Disk Usage ==="
          df -h
          echo

          echo "=== Load Average ==="
          uptime
          echo

          echo "=== Running Docker Containers ==="
          if command -v docker &> /dev/null; then
              docker ps --format "table {{ '{{' }}.Names{{ '}}' }}\t{{ '{{' }}.Status{{ '}}' }}\t{{ '{{' }}.Ports{{ '}}' }}"
          else
              echo "Docker not installed"
          fi
          echo
        dest: /home/{{ ansible_user }}/docker/scripts/pi-status.sh
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
        force: false  # Don't overwrite if exists

    - name: Check if Docker cleanup cron job exists
      ansible.builtin.cron:
        name: "Docker cleanup"
        user: "{{ ansible_user }}"
        minute: "0"
        hour: "2"
        weekday: "0"
        job: "/home/{{ ansible_user }}/docker/scripts/docker-cleanup.sh >> /home/{{ ansible_user }}/docker/logs/cleanup.log 2>&1"
        state: present

    - name: Create logrotate config for Docker logs (only if missing)
      ansible.builtin.copy:
        content: |
          /home/{{ ansible_user }}/docker/logs/*.log {
              weekly
              missingok
              rotate 4
              compress
              notifempty
              create 644 {{ ansible_user }} {{ ansible_user }}
          }
        dest: /etc/logrotate.d/pi-docker
        mode: '0644'
        force: false  # Don't overwrite if exists

    - name: Check if reboot is required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: Display reboot requirement
      ansible.builtin.debug:
        msg: "*** System restart required for some changes to take effect ***"
      when: reboot_required_file.stat.exists or reboot_needed is defined

  handlers:
    - name: Reboot required
      ansible.builtin.set_fact:
        reboot_needed: true

    - name: Restart dphys-swapfile
      ansible.builtin.systemd:
        name: dphys-swapfile
        state: restarted
